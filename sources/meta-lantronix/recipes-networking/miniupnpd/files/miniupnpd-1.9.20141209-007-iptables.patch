diff -Naur miniupnpd-1.9.20141209_orig/genconfig.sh miniupnpd-1.9.20141209_mod/genconfig.sh
--- miniupnpd-1.9.20141209_orig/genconfig.sh	2015-05-11 16:31:53.707164559 -0700
+++ miniupnpd-1.9.20141209_mod/genconfig.sh	2015-05-11 16:58:24.063075603 -0700
@@ -15,6 +15,7 @@
 	--vendorcfg) VENDORCFG=1 ;;
 	--pcp-peer) PCP_PEER=1 ;;
 	--portinuse) PORTINUSE=1 ;;
+	--iptables) USE_IPTABLES=1 ;;
 	--help|-h)
 		echo "Usage : $0 [options]"
 		echo " --ipv6      enable IPv6"
@@ -24,6 +25,7 @@
 		echo " --vendorcfg enable configuration of manufacturer info"
 		echo " --pcp-peer  enable PCP PEER operation"
 		echo " --portinuse enable port in use check"
+		echo " --iptables enable iptables"
 		exit 1
 		;;
 	*)
@@ -413,6 +415,14 @@
 fi
 echo "" >> ${CONFIGFILE}
 
+echo "/* Uncomment the following line to enable iptables */" >> ${CONFIGFILE}
+if [ -n "$USE_IPTABLES" ]; then
+	echo "#define USE_IPTABLES" >> ${CONFIGFILE}
+else
+	echo "/*#define USE_IPTABLES*/" >> ${CONFIGFILE}
+fi
+echo "" >> ${CONFIGFILE}
+
 echo "/* Define one or none of the two following macros in order to make some" >> ${CONFIGFILE}
 echo " * clients happy. It will change the XML Root Description of the IGD." >> ${CONFIGFILE}
 echo " * Enabling the Layer3Forwarding Service seems to be the more compatible" >> ${CONFIGFILE}
diff -Naur miniupnpd-1.9.20141209_orig/miniupnpd.c miniupnpd-1.9.20141209_mod/miniupnpd.c
--- miniupnpd-1.9.20141209_orig/miniupnpd.c	2015-05-11 16:31:53.707164559 -0700
+++ miniupnpd-1.9.20141209_mod/miniupnpd.c	2015-05-11 16:44:37.271121850 -0700
@@ -1439,13 +1439,14 @@
 
 	/* initialize random number generator */
 	srandom((unsigned int)time(NULL));
-
+#ifdef USE_IPTABLES
 	/* initialize redirection engine (and pinholes) */
 	if(init_redirect() < 0)
 	{
 		syslog(LOG_ERR, "Failed to init redirection engine. EXITING");
 		return 1;
 	}
+#endif
 #ifdef ENABLE_UPNPPINHOLE
 #ifdef USE_NETFILTER
 	init_iptpinhole();
diff -Naur miniupnpd-1.9.20141209_orig/upnpredirect.c miniupnpd-1.9.20141209_mod/upnpredirect.c
--- miniupnpd-1.9.20141209_orig/upnpredirect.c	2015-05-11 16:31:53.711164558 -0700
+++ miniupnpd-1.9.20141209_mod/upnpredirect.c	2015-05-11 16:55:50.555084191 -0700
@@ -279,6 +279,7 @@
 		                 "%hu->%s:%hu %s", eport, iaddr, iport, protocol);
 		return -3;
 	}
+#ifdef USE_IPTABLES
 	r = get_redirect_rule(ext_if_name, eport, proto,
 	                      iaddr_old, sizeof(iaddr_old), &iport_old, 0, 0,
 	                      0, 0,
@@ -308,7 +309,7 @@
 		return upnp_redirect_internal(rhost, eport, iaddr, iport, proto,
 		                              desc, timestamp);
 	}
-
+#endif
 	return 0;
 }
 
@@ -320,16 +321,18 @@
 {
 	/*syslog(LOG_INFO, "redirecting port %hu to %s:%hu protocol %s for: %s",
 		eport, iaddr, iport, protocol, desc);			*/
+#ifdef USE_IPTABLES
 	if(add_redirect_rule2(ext_if_name, rhost, eport, iaddr, iport, proto,
 	                      desc, timestamp) < 0) {
 		return -1;
 	}
-
+#endif
 #ifdef ENABLE_LEASEFILE
 	lease_file_add( eport, iaddr, iport, proto, desc, timestamp);
 #endif
 /*	syslog(LOG_INFO, "creating pass rule to %s:%hu protocol %s for: %s",
 		iaddr, iport, protocol, desc);*/
+#ifdef USE_IPTABLES
 	if(add_filter_rule2(ext_if_name, rhost, iaddr, eport, iport, proto, desc) < 0) {
 		/* clean up the redirect rule */
 #if !defined(__linux__)
@@ -337,6 +340,7 @@
 #endif
 		return -1;
 	}
+#endif
 	if(timestamp > 0) {
 		if(!nextruletoclean_timestamp || (timestamp < nextruletoclean_timestamp))
 			nextruletoclean_timestamp = timestamp;
@@ -368,6 +372,8 @@
 		desc[0] = '\0';
 	if(rhost && (rhostlen > 0))
 		rhost[0] = '\0';
+    *leaseduration = 0;
+#ifdef USE_IPTABLES
 	r = get_redirect_rule(ext_if_name, eport, proto_atoi(protocol),
 	                      iaddr, iaddrlen, iport, desc, desclen,
 	                      rhost, rhostlen, &timestamp,
@@ -379,6 +385,7 @@
 	} else {
 		*leaseduration = 0;
 	}
+#endif
 	return r;
 }
 
@@ -400,6 +407,7 @@
 		desc[0] = '\0';
 	if(rhost && (rhostlen > 0))
 		rhost[0] = '\0';
+#ifdef USE_IPTABLES
 	if(get_redirect_rule_by_index(index, 0/*ifname*/, eport, iaddr, iaddrlen,
 	                              iport, &proto, desc, desclen,
 	                              rhost, rhostlen, &timestamp,
@@ -417,6 +425,9 @@
 			memcpy(protocol, "UDP", 4);
 		return 0;
 	}
+#else
+    return -1;
+#endif
 }
 
 /* called from natpmp.c too */
@@ -424,6 +435,7 @@
 _upnp_delete_redir(unsigned short eport, int proto)
 {
 	int r;
+#ifdef USE_IPTABLES
 #if defined(__linux__)
 	r = delete_redirect_and_filter_rules(eport, proto);
 #elif defined(USE_PF)
@@ -432,6 +444,7 @@
 	r = delete_redirect_rule(ext_if_name, eport, proto);
 	delete_filter_rule(ext_if_name, eport, proto);
 #endif
+#endif
 #ifdef ENABLE_LEASEFILE
 	lease_file_remove( eport, proto);
 #endif
@@ -484,7 +497,7 @@
 	struct rule_state * * p;
 	int i = 0;
 	time_t current_time;
-
+#ifdef USE_IPTABLES
 	/*ifname[0] = '\0';*/
 	tmp = malloc(sizeof(struct rule_state));
 	if(!tmp)
@@ -564,6 +577,7 @@
 			list = tmp->next;
 			free(tmp);
 		}
+#endif
 	/* return list */
 	return list;
 }
@@ -578,7 +592,7 @@
 	u_int64_t bytes;
 	unsigned int timestamp;
 	int n = 0;
-
+#ifdef USE_IPTABLES
 	while(list)
 	{
 		/* remove the rule if no traffic has used it */
@@ -598,6 +612,7 @@
 	}
 	if(n>0)
 		syslog(LOG_NOTICE, "removed %d unused rules", n);
+#endif
 }
 
 /* upnp_get_portmappings_in_range()
@@ -613,7 +628,11 @@
 	proto = proto_atoi(protocol);
 	if(!number)
 		return NULL;
+#ifdef USE_IPTABLES
 	return get_portmappings_in_range(startport, endport, proto, number);
+#else
+    return NULL;
+#endif
 }
 
 /* stuff for miniupnpdctl */
