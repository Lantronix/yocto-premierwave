diff --git a/include/net-snmp/library/scapi.h b/include/net-snmp/library/scapi.h
index f4b63f5..a92063a 100644
--- a/include/net-snmp/library/scapi.h
+++ b/include/net-snmp/library/scapi.h
@@ -20,6 +20,9 @@ extern          "C" {
 #define SNMP_TRANS_PRIVLEN_1DES		64
 #define SNMP_TRANS_PRIVLEN_1DES_IV	64
 
+#define SNMP_TRANS_PRIVLEN_3DESEDE	256
+#define SNMP_TRANS_PRIVLEN_3DESEDE_IV	64
+
 #define SNMP_TRANS_PRIVLEN_AES		128
 #define SNMP_TRANS_PRIVLEN_AES_IV	128
 #define SNMP_TRANS_AES_PADSIZE	   	128  /* backwards compat */
@@ -27,6 +30,15 @@ extern          "C" {
 #define SNMP_TRANS_PRIVLEN_AES128_IV	128  /* backwards compat */
 #define SNMP_TRANS_AES_AES128_PADSIZE   128  /* backwards compat */
 
+#define SNMP_TRANS_PRIVLEN_AES192	192
+#define SNMP_TRANS_PRIVLEN_AES192_IV	128
+#define SNMP_TRANS_AES_AES192_PADSIZE   128
+
+#define SNMP_TRANS_PRIVLEN_AES256	256
+#define SNMP_TRANS_PRIVLEN_AES256_IV	128
+#define SNMP_TRANS_AES_AES256_PADSIZE   128
+
+
     /*
      * Prototypes.
      */
diff --git a/include/net-snmp/library/transform_oids.h b/include/net-snmp/library/transform_oids.h
index 61bc338..7ba93ab 100644
--- a/include/net-snmp/library/transform_oids.h
+++ b/include/net-snmp/library/transform_oids.h
@@ -18,10 +18,13 @@ NETSNMP_IMPORT oid      usmHMACSHA1AuthProtocol[10];    /* == { 1,3,6,1,6,3,10,1
 NETSNMP_IMPORT oid      usmNoPrivProtocol[10];  /* == { 1,3,6,1,6,3,10,1,2,1 }; */
 #ifndef NETSNMP_DISABLE_DES
 NETSNMP_IMPORT oid      usmDESPrivProtocol[10]; /* == { 1,3,6,1,6,3,10,1,2,2 }; */
+NETSNMP_IMPORT oid      usm3DESEDEPrivProtocol[10]; /* == { 1,3,6,1,6,3,10,1,2,3 }; */
 #endif
 
 /* XXX: OIDs not defined yet */
 NETSNMP_IMPORT oid      usmAESPrivProtocol[10]; /* == { 1,3,6,1,6,3,10,1,2,4 }; */
+NETSNMP_IMPORT oid      usmAES192PrivProtocol[10]; /* == { XXX, 1, 3 }; */
+NETSNMP_IMPORT oid      usmAES256PrivProtocol[10]; /* == { XXX, 1, 4 }; */
 NETSNMP_IMPORT oid      *usmAES128PrivProtocol; /* backwards compat */
 
 #define USM_AUTH_PROTO_NOAUTH_LEN 10
@@ -29,9 +32,12 @@ NETSNMP_IMPORT oid      *usmAES128PrivProtocol; /* backwards compat */
 #define USM_AUTH_PROTO_SHA_LEN 10
 #define USM_PRIV_PROTO_NOPRIV_LEN 10
 #define USM_PRIV_PROTO_DES_LEN 10
+#define USM_PRIV_PROTO_3DESEDE_LEN 10
 
 #define USM_PRIV_PROTO_AES_LEN 10
 #define USM_PRIV_PROTO_AES128_LEN 10 /* backwards compat */
+#define USM_PRIV_PROTO_AES192_LEN 10
+#define USM_PRIV_PROTO_AES256_LEN 10
 
 #ifdef __cplusplus
 }
diff --git a/snmplib/scapi.c b/snmplib/scapi.c
index 16ac829..6b917fa 100644
--- a/snmplib/scapi.c
+++ b/snmplib/scapi.c
@@ -709,7 +709,6 @@ sc_encrypt(const oid * privtype, size_t privtypelen,
     DES_cblock       key_struct;
 #endif
 #ifdef HAVE_AES
-    AES_KEY aes_key;
     int new_ivlen = 0;
 #endif
 
@@ -776,12 +775,25 @@ sc_encrypt(const oid * privtype, size_t privtypelen,
         properlength_iv = BYTESIZE(SNMP_TRANS_PRIVLEN_1DES_IV);
         pad_size = properlength;
         have_trans = 1;
+    } else if (ISTRANSFORM(privtype, 3DESEDEPriv)) {
+        properlength = BYTESIZE(SNMP_TRANS_PRIVLEN_3DESEDE);
+        properlength_iv = BYTESIZE(SNMP_TRANS_PRIVLEN_3DESEDE_IV);
+        pad_size = properlength;
+        have_trans = 1;
     }
 #endif
 #ifdef HAVE_AES
-    if (ISTRANSFORM(privtype, AESPriv)) {
-        properlength = BYTESIZE(SNMP_TRANS_PRIVLEN_AES);
-        properlength_iv = BYTESIZE(SNMP_TRANS_PRIVLEN_AES_IV);
+    if (ISTRANSFORM(privtype, AES128Priv)) {
+        properlength = BYTESIZE(SNMP_TRANS_PRIVLEN_AES128);
+        properlength_iv = BYTESIZE(SNMP_TRANS_PRIVLEN_AES128_IV);
+        have_trans = 1;
+    } else if (ISTRANSFORM(privtype, AES192Priv)) {
+        properlength = BYTESIZE(SNMP_TRANS_PRIVLEN_AES192);
+        properlength_iv = BYTESIZE(SNMP_TRANS_PRIVLEN_AES128);
+        have_trans = 1;
+    } else if (ISTRANSFORM(privtype, AES256Priv)) {
+        properlength = BYTESIZE(SNMP_TRANS_PRIVLEN_AES256);
+        properlength_iv = BYTESIZE(SNMP_TRANS_PRIVLEN_AES128);
         have_trans = 1;
     }
 #endif
@@ -796,8 +808,8 @@ sc_encrypt(const oid * privtype, size_t privtypelen,
     memset(my_iv, 0, sizeof(my_iv));
 
 #ifndef NETSNMP_DISABLE_DES
-    if (ISTRANSFORM(privtype, DESPriv)) {
-
+    if (ISTRANSFORM(privtype, DESPriv) ||
+	ISTRANSFORM(privtype, 3DESEDEPriv)) {
         /*
          * now calculate the padding needed 
          */
@@ -813,37 +825,115 @@ sc_encrypt(const oid * privtype, size_t privtypelen,
             memset(&pad_block[pad_size - pad], pad, pad);   /* filling in padblock */
         }
 
-        memcpy(key_struct, key, sizeof(key_struct));
-        (void) DES_key_sched(&key_struct, key_sch);
+	memcpy(my_iv, iv, ivlen);
 
-        memcpy(my_iv, iv, ivlen);
-        /*
-         * encrypt the data 
-         */
-        DES_ncbc_encrypt(plaintext, ciphertext, plast, key_sch,
-                         (DES_cblock *) my_iv, DES_ENCRYPT);
-        if (pad > 0) {
+        if (ISTRANSFORM(privtype, DESPriv)) {
+            memcpy(key_struct, key, sizeof(key_struct));
+           (void) DES_key_sched(&key_struct, key_sch);
             /*
-             * then encrypt the pad block 
+             * encrypt the data 
              */
-            DES_ncbc_encrypt(pad_block, ciphertext + plast, pad_size,
-                             key_sch, (DES_cblock *) my_iv, DES_ENCRYPT);
-            *ctlen = plast + pad_size;
-        } else {
-            *ctlen = plast;
+            DES_ncbc_encrypt(plaintext, ciphertext, plast, key_sch,
+                         (DES_cblock *) my_iv, DES_ENCRYPT);
+            if (pad > 0) {
+                /*
+                 * then encrypt the pad block 
+                 */
+                DES_ncbc_encrypt(pad_block, ciphertext + plast, pad_size,
+                                 key_sch, (DES_cblock *) my_iv, DES_ENCRYPT);
+                *ctlen = plast + pad_size;
+            } else {
+                *ctlen = plast;
+            }
+        } else if (ISTRANSFORM(privtype, 3DESEDEPriv)) {
+	    EVP_CIPHER_CTX *ctx;
+	    int len, rc, enclen;
+
+            memcpy(my_iv, iv, ivlen);
+	    ctx = EVP_CIPHER_CTX_new();
+	    if (!ctx) {
+	       ERR_print_errors_fp(stderr);
+	       QUITFUN(SNMPERR_GENERR, sc_encrypt_quit);
+	    }
+	    rc = EVP_EncryptInit(ctx, EVP_des_ede3_cbc(), key, my_iv);
+	    if (rc != 1) {
+	    	ERR_print_errors_fp(stderr);
+		EVP_CIPHER_CTX_free(ctx);
+	        QUITFUN(SNMPERR_GENERR, sc_encrypt_quit);
+	    }
+	    rc = EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, plast);
+	    if (rc != 1) {
+	    	ERR_print_errors_fp(stderr);
+		EVP_CIPHER_CTX_free(ctx);
+	        QUITFUN(SNMPERR_GENERR, sc_encrypt_quit);
+	    }
+	    enclen = len;
+            if (pad > 0) {
+                /*
+                 * then encrypt the pad block 
+                 */
+	        rc = EVP_EncryptUpdate(ctx, ciphertext + plast, &len, pad_block, pad_size);
+	        if (rc != 1) {
+	    	    ERR_print_errors_fp(stderr);
+		    EVP_CIPHER_CTX_free(ctx);
+	            QUITFUN(SNMPERR_GENERR, sc_encrypt_quit);
+	        }
+	        enclen += len;
+            }
+	    rc = EVP_EncryptFinal(ctx, ciphertext + plast + len, &len);
+	    if (rc != 1) {
+	    	ERR_print_errors_fp(stderr);
+		EVP_CIPHER_CTX_free(ctx);
+	        QUITFUN(SNMPERR_GENERR, sc_encrypt_quit);
+	    }
+	    enclen += len;
+	    /* Clean up */
+	    EVP_CIPHER_CTX_free(ctx);
+            *ctlen = enclen;
         }
     }
 #endif
 #ifdef HAVE_AES
-    if (ISTRANSFORM(privtype, AESPriv)) {
-        (void) AES_set_encrypt_key(key, properlength*8, &aes_key);
+    if (ISTRANSFORM(privtype, AES128Priv) ||
+             ISTRANSFORM(privtype, AES192Priv) ||
+             ISTRANSFORM(privtype, AES256Priv)) {
+        const EVP_CIPHER *ctype;
+	EVP_CIPHER_CTX *ctx;
+	int len, rc, enclen;
 
         memcpy(my_iv, iv, ivlen);
-        /*
-         * encrypt the data 
-         */
-        AES_cfb128_encrypt(plaintext, ciphertext, ptlen,
-                           &aes_key, my_iv, &new_ivlen, AES_ENCRYPT);
+	if (ISTRANSFORM(privtype, AES256Priv)) {
+		ctype = EVP_aes_256_cfb();
+	} else if (ISTRANSFORM(privtype, AES192Priv)) {
+		ctype = EVP_aes_192_cfb();
+	} else {
+		ctype = EVP_aes_128_cfb();
+	}
+
+	ctx = EVP_CIPHER_CTX_new();
+	if (!ctx) {
+		QUITFUN(SNMPERR_GENERR, sc_encrypt_quit);
+	}
+	rc = EVP_EncryptInit(ctx, ctype, key, my_iv);
+	if (rc != 1) {
+		EVP_CIPHER_CTX_free(ctx);
+	        QUITFUN(SNMPERR_GENERR, sc_encrypt_quit);
+	}
+	rc = EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, ptlen);
+	if (rc != 1) {
+		EVP_CIPHER_CTX_free(ctx);
+	        QUITFUN(SNMPERR_GENERR, sc_encrypt_quit);
+	}
+	enclen = len;
+	rc = EVP_EncryptFinal(ctx, ciphertext + len, &len);
+	if (rc != 1) {
+		EVP_CIPHER_CTX_free(ctx);
+		QUITFUN(SNMPERR_GENERR, sc_encrypt_quit);
+	}
+	enclen += len;
+	ptlen = enclen;
+	/* Clean up */
+	EVP_CIPHER_CTX_free(ctx);
         *ctlen = ptlen;
     }
 #endif
@@ -861,9 +951,6 @@ sc_encrypt(const oid * privtype, size_t privtypelen,
     memset(&key_sched_store, 0, sizeof(key_sched_store));
 #endif
 #endif
-#ifdef HAVE_AES
-    memset(&aes_key,0,sizeof(aes_key));
-#endif
     return rval;
 
 }                               /* end sc_encrypt() */
@@ -1028,12 +1115,24 @@ sc_decrypt(const oid * privtype, size_t privtypelen,
         properlength = BYTESIZE(SNMP_TRANS_PRIVLEN_1DES);
         properlength_iv = BYTESIZE(SNMP_TRANS_PRIVLEN_1DES_IV);
         have_transform = 1;
+    } else if (ISTRANSFORM(privtype, 3DESEDEPriv)) {
+        properlength = BYTESIZE(SNMP_TRANS_PRIVLEN_3DESEDE);
+        properlength_iv = BYTESIZE(SNMP_TRANS_PRIVLEN_3DESEDE_IV);
+        have_transform = 1;
     }
 #endif
 #ifdef HAVE_AES
-    if (ISTRANSFORM(privtype, AESPriv)) {
-        properlength = BYTESIZE(SNMP_TRANS_PRIVLEN_AES);
-        properlength_iv = BYTESIZE(SNMP_TRANS_PRIVLEN_AES_IV);
+    if (ISTRANSFORM(privtype, AES128Priv)) {
+        properlength = BYTESIZE(SNMP_TRANS_PRIVLEN_AES128);
+        properlength_iv = BYTESIZE(SNMP_TRANS_PRIVLEN_AES128_IV);
+        have_transform = 1;
+    } else if (ISTRANSFORM(privtype, AES192Priv)) {
+        properlength = BYTESIZE(SNMP_TRANS_PRIVLEN_AES192);
+        properlength_iv = BYTESIZE(SNMP_TRANS_PRIVLEN_AES192_IV);
+        have_transform = 1;
+    } else if (ISTRANSFORM(privtype, AES256Priv)) {
+        properlength = BYTESIZE(SNMP_TRANS_PRIVLEN_AES256);
+        properlength_iv = BYTESIZE(SNMP_TRANS_PRIVLEN_AES256_IV);
         have_transform = 1;
     }
 #endif
@@ -1055,18 +1154,74 @@ sc_decrypt(const oid * privtype, size_t privtypelen,
         DES_cbc_encrypt(ciphertext, plaintext, ctlen, key_sch,
                         (DES_cblock *) my_iv, DES_DECRYPT);
         *ptlen = ctlen;
-    }
+    } else if (ISTRANSFORM(privtype, 3DESEDEPriv)) {
+	EVP_CIPHER_CTX *ctx;
+	int len, rc;
+
+        memcpy(my_iv, iv, ivlen);
+
+	ctx = EVP_CIPHER_CTX_new();
+	if (!ctx) {
+	    ERR_print_errors_fp(stderr);
+	    QUITFUN(SNMPERR_GENERR, sc_decrypt_quit);
+	}
+	rc = EVP_DecryptInit(ctx, EVP_des_ede3_cbc(), key, my_iv);
+	if (rc != 1) {
+	    ERR_print_errors_fp(stderr);
+	    EVP_CIPHER_CTX_free(ctx);
+	    QUITFUN(SNMPERR_GENERR, sc_decrypt_quit);
+	}
+	rc = EVP_DecryptUpdate(ctx, plaintext, &len, ciphertext, ctlen);
+	if (rc != 1) {
+	    ERR_print_errors_fp(stderr);
+            EVP_CIPHER_CTX_free(ctx);
+	    QUITFUN(SNMPERR_GENERR, sc_decrypt_quit);
+	}
+
+	EVP_DecryptFinal(ctx, plaintext + len, &len);
+	EVP_CIPHER_CTX_free(ctx);
+        *ptlen = ctlen;
+     }
 #endif
 #ifdef HAVE_AES
-    if (ISTRANSFORM(privtype, AESPriv)) {
-        (void) AES_set_encrypt_key(key, properlength*8, &aes_key);
+    if (ISTRANSFORM(privtype, AES128Priv) ||
+             ISTRANSFORM(privtype, AES192Priv) ||
+             ISTRANSFORM(privtype, AES256Priv)) {
+        const EVP_CIPHER *ctype;
+	EVP_CIPHER_CTX *ctx;
+	int len, rc;
 
         memcpy(my_iv, iv, ivlen);
-        /*
-         * encrypt the data 
-         */
-        AES_cfb128_encrypt(ciphertext, plaintext, ctlen,
-                           &aes_key, my_iv, &new_ivlen, AES_DECRYPT);
+
+	if (ISTRANSFORM(privtype, AES256Priv)) {
+		ctype = EVP_aes_256_cfb();
+	} else if (ISTRANSFORM(privtype, AES192Priv)) {
+		ctype = EVP_aes_192_cfb();
+	} else {
+		ctype = EVP_aes_128_cfb();
+	}
+
+	ctx = EVP_CIPHER_CTX_new();
+	if (!ctx) {
+		QUITFUN(SNMPERR_GENERR, sc_decrypt_quit);
+	}
+	rc = EVP_DecryptInit(ctx, ctype, key, my_iv);
+	if (rc != 1) {
+		EVP_CIPHER_CTX_free(ctx);
+		QUITFUN(SNMPERR_GENERR, sc_decrypt_quit);
+	}
+	rc = EVP_DecryptUpdate(ctx, plaintext, &len, ciphertext, ctlen);
+	if (rc != 1) {
+		EVP_CIPHER_CTX_free(ctx);
+		QUITFUN(SNMPERR_GENERR, sc_decrypt_quit);
+	}
+	rc = EVP_DecryptFinal(ctx, plaintext + len, &len);
+	if (rc != 1) {
+		EVP_CIPHER_CTX_free(ctx);
+		QUITFUN(SNMPERR_GENERR, sc_decrypt_quit);
+	}
+	/* Clean up */
+	EVP_CIPHER_CTX_free(ctx);
         *ptlen = ctlen;
     }
 #endif
diff --git a/snmplib/snmp_parse_args.c b/snmplib/snmp_parse_args.c
index 6842d0e..371420a 100644
--- a/snmplib/snmp_parse_args.c
+++ b/snmplib/snmp_parse_args.c
@@ -111,9 +111,9 @@ snmp_parse_args_descriptions(FILE * outf)
     fprintf(outf, "  -n CONTEXT\t\tset context name (e.g. bridge1)\n");
     fprintf(outf, "  -u USER-NAME\t\tset security name (e.g. bert)\n");
 #ifdef HAVE_AES
-    fprintf(outf, "  -x PROTOCOL\t\tset privacy protocol (DES|AES)\n");
+    fprintf(outf, "  -x PROTOCOL\t\tset privacy protocol (DES|3DES|AES|AES128|AES192|AES256)\n");
 #else
-    fprintf(outf, "  -x PROTOCOL\t\tset privacy protocol (DES)\n");
+    fprintf(outf, "  -x PROTOCOL\t\tset privacy protocol (DES|3DES)\n");
 #endif
     fprintf(outf, "  -X PASSPHRASE\t\tset privacy protocol pass phrase\n");
     fprintf(outf,
@@ -584,13 +584,26 @@ netsnmp_parse_args(int argc,
                 session->securityPrivProto = usmDESPrivProtocol;
                 session->securityPrivProtoLen = USM_PRIV_PROTO_DES_LEN;
             }
+            if (!strcasecmp(optarg, "3DES")) {
+                testcase = 1;
+                session->securityPrivProto = usm3DESEDEPrivProtocol;
+                session->securityPrivProtoLen = USM_PRIV_PROTO_3DESEDE_LEN;
+            }
 #endif
 #ifdef HAVE_AES
-            if (!strcasecmp(optarg, "AES128") ||
-                !strcasecmp(optarg, "AES")) {
+	    if (!strcasecmp(optarg, "AES128")
+                       || !strcasecmp(optarg, "AES")) {
+                session->securityPrivProto = usmAES128PrivProtocol;
+                session->securityPrivProtoLen = USM_PRIV_PROTO_AES128_LEN;
+                testcase = 1;
+            } else if (!strcasecmp(optarg, "AES192")) {
+                session->securityPrivProto = usmAES192PrivProtocol;
+                session->securityPrivProtoLen = USM_PRIV_PROTO_AES192_LEN;
+                testcase = 1;
+            } else if (!strcasecmp(optarg, "AES256")) {
+                session->securityPrivProto = usmAES256PrivProtocol;
+                session->securityPrivProtoLen = USM_PRIV_PROTO_AES256_LEN;
                 testcase = 1;
-                session->securityPrivProto = usmAESPrivProtocol;
-                session->securityPrivProtoLen = USM_PRIV_PROTO_AES_LEN;
             }
 #endif
             if (testcase == 0) {
diff --git a/snmplib/snmpusm.c b/snmplib/snmpusm.c
index 6a9cec3..d2e60bc 100644
--- a/snmplib/snmpusm.c
+++ b/snmplib/snmpusm.c
@@ -72,6 +72,12 @@
 #include <net-snmp/library/snmp_secmod.h>
 #include <net-snmp/library/snmpusm.h>
 
+#include <openssl/hmac.h>
+#include <openssl/evp.h>
+#include <openssl/rand.h>
+#include <openssl/des.h>
+#include <openssl/aes.h>
+
 netsnmp_feature_child_of(usm_all, libnetsnmp)
 netsnmp_feature_child_of(usm_support, usm_all)
 
@@ -87,8 +93,11 @@ oid             usmHMACSHA1AuthProtocol[10] =
 oid             usmNoPrivProtocol[10] = { 1, 3, 6, 1, 6, 3, 10, 1, 2, 1 };
 #ifndef NETSNMP_DISABLE_DES
 oid             usmDESPrivProtocol[10] = { 1, 3, 6, 1, 6, 3, 10, 1, 2, 2 };
+oid             usm3DESEDEPrivProtocol[10] = { 1, 3, 6, 1, 6, 3, 10, 1, 2, 3 };
 #endif
-oid             usmAESPrivProtocol[10] = { 1, 3, 6, 1, 6, 3, 10, 1, 2, 4 };
+oid             usmAESPrivProtocol[10]    = { 1, 3, 6, 1, 6, 3, 10, 1, 2, 4 };
+oid             usmAES192PrivProtocol[10] = { 1, 3, 6, 1, 4, 1, 8072, 876,876,192 };
+oid             usmAES256PrivProtocol[10] = { 1, 3, 6, 1, 4, 1, 8072, 876,876,256 };
 /* backwards compat */
 oid             *usmAES128PrivProtocol = usmAESPrivProtocol;
 
@@ -1072,7 +1081,9 @@ usm_generate_out_msg(int msgProcModel,  /* (UNUSED) */
          * XXX  Hardwired to seek into a 1DES private key!
          */
 #ifdef HAVE_AES
-        if (ISTRANSFORM(thePrivProtocol, AESPriv)) {
+        if (ISTRANSFORM(thePrivProtocol, AES128Priv) &&
+            ISTRANSFORM(thePrivProtocol, AES192Priv) &&
+            ISTRANSFORM(thePrivProtocol, AES256Priv)) {
             if (!thePrivKey ||
                 usm_set_aes_iv(salt, &salt_length,
                                htonl(boots_uint), htonl(time_uint),
@@ -1094,7 +1105,17 @@ usm_generate_out_msg(int msgProcModel,  /* (UNUSED) */
                 usm_free_usmStateReference(secStateRef);
                 return SNMPERR_USM_GENERICERROR;
             }
-        }
+        } else if (ISTRANSFORM(thePrivProtocol, 3DESEDEPriv)) {
+            if (!thePrivKey ||
+                (usm_set_salt(salt, &salt_length,
+                              &thePrivKey[24], 8,
+                              &ptr[privParamsOffset])
+                 == -1)) {
+                DEBUGMSGTL(("usm", "Can't set DES-CBC salt.\n"));
+                usm_free_usmStateReference(secStateRef);
+                return SNMPERR_USM_GENERICERROR;
+            }
+	}
 #endif
 
         if (sc_encrypt(thePrivProtocol, thePrivProtocolLength,
@@ -1552,7 +1573,9 @@ usm_rgenerate_out_msg(int msgProcModel, /* (UNUSED) */
          * XXX Hardwired to seek into a 1DES private key!  
          */
 #ifdef HAVE_AES
-        if (ISTRANSFORM(thePrivProtocol, AESPriv)) {
+        if (ISTRANSFORM(thePrivProtocol, AES128Priv) ||
+            ISTRANSFORM(thePrivProtocol, AES192Priv) ||
+            ISTRANSFORM(thePrivProtocol, AES256Priv)) {
             salt_length = BYTESIZE(USM_AES_SALT_LENGTH);
             save_salt_length = BYTESIZE(USM_AES_SALT_LENGTH)/2;
             if (!thePrivKey ||
@@ -1579,6 +1602,18 @@ usm_rgenerate_out_msg(int msgProcModel, /* (UNUSED) */
                 SNMP_FREE(ciphertext);
                 return SNMPERR_USM_GENERICERROR;
             }
+        } else if (ISTRANSFORM(thePrivProtocol, 3DESEDEPriv)) {
+            salt_length = BYTESIZE(USM_DES_SALT_LENGTH);
+            save_salt_length = BYTESIZE(USM_DES_SALT_LENGTH);
+            if (!thePrivKey || (usm_set_salt(salt, &salt_length,
+                                             &thePrivKey[24],
+                                             8,
+                                             iv) == -1)) {
+                DEBUGMSGTL(("usm", "Can't set DES-CBC salt.\n"));
+                usm_free_usmStateReference(secStateRef);
+                SNMP_FREE(ciphertext);
+                return SNMPERR_USM_GENERICERROR;
+            }
         }
 #endif
 #ifdef NETSNMP_ENABLE_TESTING_CODE
@@ -2644,10 +2679,22 @@ usm_process_in_msg(int msgProcModel,    /* (UNUSED) */
             iv_length = BYTESIZE(USM_DES_SALT_LENGTH);
             for (i = 0; i < (int) iv_length; i++)
                 iv[i] = salt[i] ^ user->privKey[iv_length + i];
-        }
+        } else if (ISTRANSFORM(user->privProtocol, 3DESEDEPriv)) {
+            iv_length = BYTESIZE(USM_DES_SALT_LENGTH);
+            net_boots = ntohl(boots_uint);
+            net_time = ntohl(time_uint);
+            memcpy(iv, &net_boots, 4);
+            memcpy(iv+4, &net_time, 4);
+	
+            for (i = 0; i < (int) iv_length; i++) {
+                iv[i] = salt[i] ^ user->privKey[24 + i];
+	    }
+	}
 #endif
 #ifdef HAVE_AES
-        if (ISTRANSFORM(user->privProtocol, AESPriv)) {
+        if (ISTRANSFORM(user->privProtocol, AES128Priv) ||
+                 ISTRANSFORM(user->privProtocol, AES192Priv) ||
+                 ISTRANSFORM(user->privProtocol, AES256Priv)) {
             iv_length = BYTESIZE(USM_AES_SALT_LENGTH);
             net_boots = ntohl(boots_uint);
             net_time = ntohl(time_uint);
@@ -3044,6 +3091,52 @@ usm_create_user_from_session(netsnmp_session * session)
                 usm_free_user(user);
                 return SNMPERR_GENERR;
             }
+	    {
+		int need_key_len;
+		size_t key_size = user->privKeyLen;
+		int key_len = user->privKeyLen;
+		int ret;
+
+		 if (ISTRANSFORM(user->privProtocol, 3DESEDEPriv)) {
+			need_key_len = BYTESIZE(SNMP_TRANS_PRIVLEN_3DESEDE);
+		 } else if (ISTRANSFORM(user->privProtocol, AES128Priv)) {
+			need_key_len = BYTESIZE(SNMP_TRANS_PRIVLEN_AES128);
+		 } else if (ISTRANSFORM(user->privProtocol, AES192Priv)) {
+			need_key_len = BYTESIZE(SNMP_TRANS_PRIVLEN_AES192);
+                 } else if (ISTRANSFORM(user->privProtocol, AES256Priv)) {
+			need_key_len = BYTESIZE(SNMP_TRANS_PRIVLEN_AES256);
+		 }
+
+		/* extend key if needed */
+		while (key_len < need_key_len) {
+			char key1[key_len];
+			if (generate_Ku(
+			     session->securityAuthProto,
+                      	     session->securityAuthProtoLen,
+                             user->privKey,
+                             key_len,
+                       	     key1,
+                       	     &key_size) != SNMPERR_SUCCESS) {
+		             usm_free_user(user);
+		             return SNMPERR_GENERR;
+			} 
+			if (generate_kul(
+			     user->authProtocol,
+			     user->authProtocolLen,
+                             session->securityEngineID,
+                             session->securityEngineIDLen,
+                             key1,
+                             key_size,
+			     user->privKey + key_len,
+                             &user->privKeyLen) != SNMPERR_SUCCESS) {
+		             usm_free_user(user);
+		             return SNMPERR_GENERR;
+			}
+
+			key_len += user->privKeyLen;
+		}
+               	user->privKeyLen = need_key_len;
+            }
         } else if ((cp = netsnmp_ds_get_string(NETSNMP_DS_LIBRARY_ID, 
                                                NETSNMP_DS_LIB_PRIVLOCALIZEDKEY))) {
             size_t buflen = USM_PRIV_KU_LEN;
@@ -3240,9 +3333,9 @@ init_usm(void)
     register_config_handler("snmp", "defPrivType", snmpv3_privtype_conf,
                             NULL,
 #ifdef HAVE_AES
-                            "DES|AES"
+                            "DES|3DES|AES128|AES192|AES256"
 #else
-                            "DES (AES support not available)"
+                            "DES|3DES (AES support not available)"
 #endif
                            );
 
@@ -4107,11 +4200,17 @@ usm_read_user(const char *line)
     if (ISTRANSFORM(user->privProtocol, DESPriv)) {
         /* DES uses a 128 bit key, 64 bits of which is a salt */
         expected_privKeyLen = 16;
+    } else if (ISTRANSFORM(user->privProtocol, 3DESEDEPriv)) {
+        expected_privKeyLen = 32;
     }
 #endif
 #ifdef HAVE_AES
-    if (ISTRANSFORM(user->privProtocol, AESPriv)) {
+    if (ISTRANSFORM(user->privProtocol, AES128Priv)) {
         expected_privKeyLen = 16;
+    } else if (ISTRANSFORM(user->privProtocol, AES192Priv)) {
+        expected_privKeyLen = 24;
+    } else if (ISTRANSFORM(user->privProtocol, AES256Priv)) {
+        expected_privKeyLen = 32;
     }
 #endif
     /* For backwards compatibility */
@@ -4490,6 +4589,12 @@ usm_parse_create_usmUser(const char *token, char *line)
         testcase = 1;
 	/* DES uses a 128 bit key, 64 bits of which is a salt */
 	privKeyLen = 16;
+    } else if (strncmp(cp, "3DES", 4) == 0) {
+        memcpy(newuser->privProtocol, usm3DESEDEPrivProtocol,
+               sizeof(usm3DESEDEPrivProtocol));
+        testcase = 1;
+	/* DES uses a 128 bit key, 64 bits of which is a salt */
+	privKeyLen = 32;
     }
 #endif
 #ifdef HAVE_AES
@@ -4499,6 +4604,16 @@ usm_parse_create_usmUser(const char *token, char *line)
                sizeof(usmAESPrivProtocol));
         testcase = 1;
 	privKeyLen = 16;
+    } else if (strncmp(cp, "AES192", 6) == 0) {
+        memcpy(newuser->privProtocol, usmAES192PrivProtocol,
+               sizeof(usmAES192PrivProtocol));
+        testcase = 1;
+	privKeyLen = 24;
+    } else if (strncmp(cp, "AES256", 6) == 0) {
+        memcpy(newuser->privProtocol, usmAES256PrivProtocol,
+               sizeof(usmAES256PrivProtocol));
+        testcase = 1;
+	privKeyLen = 32;
     }
 #endif
     if (testcase == 0) {
@@ -4637,6 +4752,9 @@ snmpv3_privtype_conf(const char *word, char *cptr)
     if (strcasecmp(cptr, "DES") == 0) {
         testcase = 1;
         defaultPrivType = usmDESPrivProtocol;
+    } else if (strcasecmp(cptr, "3DES") == 0) {
+        testcase = 1;
+        defaultPrivType = usm3DESEDEPrivProtocol;
     }
 #endif
 
@@ -4646,6 +4764,12 @@ snmpv3_privtype_conf(const char *word, char *cptr)
         strcasecmp(cptr, "AES") == 0) {
         testcase = 1;
         defaultPrivType = usmAES128PrivProtocol;
+    } else if (strcasecmp(cptr, "AES192") == 0) {
+        testcase = 1;
+        defaultPrivType = usmAES192PrivProtocol;
+    } else if (strcasecmp(cptr, "AES256") == 0) {
+        testcase = 1;
+        defaultPrivType = usmAES256PrivProtocol;
     }
 #endif
     if (testcase == 0)
diff --git a/snmplib/snmpv3.c b/snmplib/snmpv3.c
index 435cafd..bbb981a 100644
--- a/snmplib/snmpv3.c
+++ b/snmplib/snmpv3.c
@@ -290,6 +290,10 @@ snmpv3_options(char *optarg, netsnmp_session * session, char **Apsz,
             session->securityPrivProto = usmDESPrivProtocol;
             session->securityPrivProtoLen = USM_PRIV_PROTO_DES_LEN;
             testcase = 1;
+        } else if (!strcasecmp(optarg, "3DES")) {
+            session->securityPrivProto = usm3DESEDEPrivProtocol;
+            session->securityPrivProtoLen = USM_PRIV_PROTO_3DESEDE_LEN;
+            testcase = 1;
         }
 #endif
 #ifdef HAVE_AES
@@ -298,7 +302,15 @@ snmpv3_options(char *optarg, netsnmp_session * session, char **Apsz,
             session->securityPrivProto = usmAES128PrivProtocol;
             session->securityPrivProtoLen = USM_PRIV_PROTO_AES128_LEN;
             testcase = 1;
-        }
+        } else if (strcasecmp(optarg, "AES192") == 0) {
+            session->securityPrivProto = usmAES192PrivProtocol;
+            session->securityPrivProtoLen = USM_PRIV_PROTO_AES192_LEN;
+            testcase = 1;
+	} else if (strcasecmp(optarg, "AES256") == 0) {
+            session->securityPrivProto = usmAES256PrivProtocol;
+            session->securityPrivProtoLen = USM_PRIV_PROTO_AES256_LEN;
+            testcase = 1;
+	}
 #endif
         if (testcase == 0) {
             fprintf(stderr,