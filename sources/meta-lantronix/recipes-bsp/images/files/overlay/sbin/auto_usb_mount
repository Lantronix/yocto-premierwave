#!/bin/sh

logmsg() {
    logger -s "automount: $1"
}

trimws() {
    echo "$1"
}

wait_file() {
    local file="$1"; shift
    local wait_seconds="${1:-10}"; shift # 10 seconds as default timeout
    until test $((wait_seconds--)) -eq 0 -o -f "$file" ; do sleep 1; done
    ((++wait_seconds))
}

rem_dev() {

    MNTPT_DEV=`mount | awk '/^\/dev\/'"$MDEV"' on/ {print $1}'`
    if [ "$MNTPT_DEV" != "" ] ; then
        res=$(umount -f "/dev/$MDEV" 2>&1)
        RC=$?
        rmdir "$MNTPT_DEV"
        if [ $RC -eq 0 ] ; then
            logmsg "unmounted /dev/$MDEV"
        else
            logmsg "failed to unmount /dev/$MDEV: ${res}"
            MNTPT_NODE=`mount | awk '/^\/dev\/'"$MDEV"' on/ {print $3 }'`
            logmsg "trying to unmount ${MNTPT_NODE}"

            tries=0
            while [ $tries -lt 3 ] ; do
                res=$(umount -f "${MNTPT_NODE}" 2>&1)
                RC=$?
                if [ $RC -eq 0 ] ; then
                    break;
                fi
                sleep 1
                tries=$((tries + 1))
            done
            if [ $RC -eq 0 ] ; then
                logmsg "unmounted ${MNTPT_NODE}"
            else
                logmsg "failed to unmount ${MNTPT_NODE}: ${res}"
            fi
        fi
    fi
    return 0
}

add_dev() {

    if [ -d /sys/block/$MDEV ] ; then
        DISK_NAME=/sys/block/$MDEV
        DEV_TYPE=disk
    else
        DISK_NAME=`dirname /sys/block/*/$MDEV`
        DEV_TYPE=partition
    fi

    if [ -d $DISK_NAME/device/scsi_device ] ; then
        SCSI_DEV=$DISK_NAME/device/scsi_device/*
        SCSI_HOST=`basename $SCSI_DEV | cut -d : -f 1`
    else
        SCSI_DEV=$DISK_NAME/device/scsi_device:*
        SCSI_HOST=`basename $SCSI_DEV | cut -d : -f 2`
    fi
    SCSI_FILE=/proc/scsi/usb-storage/$SCSI_HOST
    if [ ! -f "$SCSI_FILE" ] ; then
        logmsg "ignoring non-USB storage device /dev/$MDEV"
        return 0
    fi

    MNTPT_DEV=`mount | awk '/^\/dev\/'"$MDEV"' on/ {print $1}'`
    if [ "$MNTPT_DEV" != "" ] ; then
        # already mounted; for some reason, we get a udev pass from
        # the hotplug partition rescan and the hotplug add disk
        return 0
    fi

    DRIVE_VENDOR=`awk '{if ($1 ~ /Vendor/) \
        print gensub(/^ +| +$/, "", "g", substr($0, index($0, $2)))}' "$SCSI_FILE"`
    DRIVE_MODEL=`awk '{if ($1 ~ /Product/) \
        print gensub(/^ +| +$/, "", "g", substr($0, index($0, $2)))}' "$SCSI_FILE"`
 
#    The serial number makes the mount point too long to type out ... 
#    DRIVE_SERIALNO=`awk '{if ($1 ~ /Serial/ && $2 ~ /Number/) \
#        print gensub(/^ +| +$/, "", "g", substr($0, index($0, $3)))}' "$SCSI_FILE"`

    if [[ "$DRIVE_VENDOR" == "" && "$DRIVE_MODEL" == "" ]] ; then
        MNTPT_DEV="/ltrx_user/$MDEV"
    else
        MNTPT_DEV="/ltrx_user/$DRIVE_VENDOR $DRIVE_MODEL $MDEV"
    fi
    
    if [ $isLuksDev == 1 ]; then
	MDEV="mapper/USBDrive"
    fi
    USB_LABEL=`e2label /dev/$MDEV 2>/dev/null | tr -d '\n'`
    #if [ "$USB_LABEL" != "" ] ; then
    #    MNTPT_DEV="/ltrx_user/$USB_LABEL"
    #fi
    if [ "$USB_LABEL" == "Lantronix_eUSB" ] ; then
        MNTPT_DEV="/ltrx_user/Internal_Storage"
        logmsg "run fsck: /dev/$MDEV"
        fsck /dev/$MDEV
    fi
    MNTPT_DEV=`echo "$MNTPT_DEV" | sed -e "s/ /_/g"`

    if [[ -e $MNTPT_DEV && ! -d $MNTPT_DEV ]] ; then
        logmsg "cannot mount $MDEV; '$MNTPT_DEV' is in the way"
        return 1
    fi

    tries=0
    while [ $tries -lt 3 ] ; do
        mkdir "$MNTPT_DEV"
        MRES=`mount -o sync,nodev,exec,noatime "/dev/$MDEV" "$MNTPT_DEV" 2>&1`
        MRC=$?
        if [ $MRC -ne 0 ] ; then
            if [ $DEV_TYPE == "partition" ] ; then
                logmsg "$MRES"
                logmsg "The file system type on /dev/$MDEV may not be supported"
                tries=$((tries + 1))
                sleep 1
            else
                tries=3
            fi
            rmdir "$MNTPT_DEV"
        else
            logmsg "mounted /dev/$MDEV on '$MNTPT_DEV'"
            chgrp -R admin $MNTPT_DEV
            break;
        fi
    done

    return 0
}

cryptsetup_eUSB() {
    key=`cat /etc/ssl/misc/lantronix.key`
    touch /ltrx_private/usbencryptionkeyfile
    echo "lantronix.key" > /ltrx_private/usbencryptionkeyfile
    wait_file "/tmp/mach10.device_key" && {
        key=`cat /tmp/mach10.device_key`
	echo "mach10.device_key" > /ltrx_private/usbencryptionkeyfile
    }

    echo $key | cryptsetup -q luksFormat /dev/$MDEV
    echo $key | cryptsetup luksOpen /dev/$MDEV USBDrive
    if [ -e /dev/mapper/USBDrive ]; then
        mkfs.ext4 -L Lantronix_eUSB /dev/mapper/USBDrive
    else
        mkfs.ext4 -L Lantronix_eUSB /dev/$MDEV
    fi
    return 0
}

USB_AUTO_MOUNT="disabled"
if [ -f /etc/usb_auto_mount ]; then
    . /etc/usb_auto_mount
fi

isLuksDev=0
cryptsetup isLuks /dev/$MDEV && isLuksDev=1

if [ $isLuksDev == 1 ]; then
    if [ ! -e /ltrx_private/usbencryptionkeyfile ]; then
        mkfs.ext4 -L Lantronix_eUSB /dev/$MDEV
        isLuksDev=0
    fi
fi

logmsg "$MDEV is luks formatted device $isLuksDev"
if [ $isLuksDev == 0 ]; then
    USB_LABEL=`e2label /dev/$MDEV 2>/dev/null | tr -d '\n'`
    if [ "$USB_LABEL" == "Lantronix_eUSB" ] ; then
        cryptsetup_eUSB
        cryptsetup isLuks /dev/$MDEV && isLuksDev=1
        USB_LABEL=`e2label /dev/mapper/USBDrive 2>/dev/null | tr -d '\n'`
    fi
else
    key_file=`cat /ltrx_private/usbencryptionkeyfile`
    key=`cat /etc/ssl/misc/lantronix.key`
    if [ "$key_file" == "mach10.device_key" ]; then
        wait_file "/tmp/mach10.device_key" && {
            key=`cat /tmp/mach10.device_key`
        }
    fi
    echo $key | cryptsetup luksOpen /dev/$MDEV USBDrive
    USB_LABEL=`e2label /dev/mapper/USBDrive 2>/dev/null | tr -d '\n'`
fi

if [ "$USB_LABEL" == "Lantronix_eUSB" ] ; then
    USB_AUTO_MOUNT="enabled"
fi
if [ "$USB_AUTO_MOUNT" == "enabled" ] ; then
    if [ "$ACTION" == "add" ] ; then
        add_dev
    elif [ "$ACTION" == "remove" ] ; then
        rem_dev
    else
        logmsg "unknown action '$ACTION' for dev '$MDEV'"
    fi
else
    logmsg "action '$ACTION' for dev '$MDEV', USB auto mount is disabled"
fi

exit $?
