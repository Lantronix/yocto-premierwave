diff -Naur busybox-1.22.1/networking/telnet.c busybox-1.22.1_ltrx/networking/telnet.c
--- busybox-1.22.1/networking/telnet.c	2014-01-09 10:15:44.000000000 -0800
+++ busybox-1.22.1_ltrx/networking/telnet.c	2015-11-26 09:15:13.161979916 -0800
@@ -18,6 +18,8 @@
  * <jam@ltsp.org>
  * Modified 2004/02/11 to add ability to pass the USER variable to remote host
  * by Fernando Silveira <swrh@gmx.net>
+ * Modified 2011/05/12 to add configurable escape sequence
+ * by Steven Cook <scook@lantronix.com>
  *
  */
 
@@ -40,6 +42,8 @@
 #include <netinet/in.h>
 #include "libbb.h"
 
+#define MAX_ESCAPE_SEQUENCE_LENGTH 8
+
 #ifdef __BIONIC__
 /* should be in arpa/telnet.h */
 # define IAC         255  /* interpret as command: */
@@ -107,6 +111,12 @@
 	char    iacbuf[IACBUFSIZE];
 	struct termios termios_def;
 	struct termios termios_raw;
+        /* Configurable escape sequence */
+	const char *asciiEscape;
+	char clearEscape[MAX_ESCAPE_SEQUENCE_LENGTH + 1];
+	unsigned int escapeSequenceLength;
+	unsigned int matchingEscapeCharacters;
+	byte currentCharacters[MAX_ESCAPE_SEQUENCE_LENGTH + 1];
 } FIX_ALIASING;
 #define G (*(struct globals*)&bb_common_bufsiz1)
 #define INIT_G() do { \
@@ -182,37 +192,84 @@
 	bb_got_signal = 0;
 }
 
+static byte *scrutinize(byte c, bool *isEscape)
+{
+    if(isEscape)
+    {
+        *isEscape = false;
+    }
+    if(c == G.clearEscape[G.matchingEscapeCharacters])
+    {
+        ++G.matchingEscapeCharacters;
+        if(G.matchingEscapeCharacters == G.escapeSequenceLength)
+        {
+            if(isEscape)
+            {
+                *isEscape = true;
+            }
+            G.matchingEscapeCharacters = 0;
+        }
+        return NULL;
+    }
+    if(G.matchingEscapeCharacters > 0)
+    {
+        memcpy(G.currentCharacters, G.clearEscape, G.matchingEscapeCharacters);
+        G.currentCharacters[G.matchingEscapeCharacters] = c;
+        G.currentCharacters[G.matchingEscapeCharacters + 1] = 0;
+        G.matchingEscapeCharacters = 0;
+    }
+    else
+    {
+        G.currentCharacters[0] = c;
+        G.currentCharacters[1] = 0;
+    }
+    return G.currentCharacters;
+}
+ 
 static void handle_net_output(int len)
 {
-	byte outbuf[2 * DATABUFSIZE];
+	bool isEscape = false;
+	byte outbuf[2 * DATABUFSIZE + MAX_ESCAPE_SEQUENCE_LENGTH];
 	byte *dst = outbuf;
 	byte *src = (byte*)G.buf;
 	byte *end = src + len;
 
 	while (src < end) {
 		byte c = *src++;
-		if (c == 0x1d) {
-			con_escape();
-			return;
-		}
-		*dst = c;
-		if (c == IAC)
-			*++dst = c; /* IAC -> IAC IAC */
-		else
-		if (c == '\r' || c == '\n') {
-			/* Enter key sends '\r' in raw mode and '\n' in cooked one.
-			 *
-			 * See RFC 1123 3.3.1 Telnet End-of-Line Convention.
-			 * Using CR LF instead of other allowed possibilities
-			 * like CR NUL - easier to talk to HTTP/SMTP servers.
-			 */
-			*dst = '\r'; /* Enter -> CR LF */
-			*++dst = '\n';
+		byte *d = scrutinize(c, &isEscape);
+		if(isEscape)
+		{
+			break;
 		}
+		while(d && *d)
+                {               
+			*dst = *d;
+			if (*d == IAC)
+				*++dst = *d; /* IAC -> IAC IAC */
+			else
+			if (*d == '\r' || *d == '\n') {
+				/* Enter key sends '\r' in raw mode and '\n' in cooked 
+                                 * one.
+				 *
+				 * See RFC 1123 3.3.1 Telnet End-of-Line Convention.
+				 * Using CR LF instead of other allowed possibilities
+				 * like CR NUL - easier to talk to HTTP/SMTP servers.
+				 */
+				*dst = '\r'; /* Enter -> CR LF */
+				*++dst = '\n';
+			}
+                        ++d;
+                }
 		dst++;
 	}
 	if (dst - outbuf != 0)
+        {
 		full_write(netfd, outbuf, dst - outbuf);
+        }
+        if(isEscape)
+        {
+            doexit(EXIT_SUCCESS);
+        }
 }
 
 static void handle_net_input(int len)
@@ -583,6 +640,63 @@
 		tcsetattr(0, TCSADRAIN, &G.termios_def);
 }
 
+static bool convertTextToControl(
+    const char *input,
+    char *output,
+    unsigned int maxLength
+)
+{
+    const char *pGuaranteedInput = (
+        input && *input ?
+        input : "<control>L"
+    );
+    const char *p = pGuaranteedInput;
+    unsigned int n;
+    for(n = 0; *p || n == 0; ++n)
+    {
+        static const char s_ctrl[] = "<control>";
+        char value = 0;
+        if(
+            strncmp(p, s_ctrl, sizeof(s_ctrl) - 1) == 0 &&
+            p[sizeof(s_ctrl) - 1]
+        )
+        {
+            char c = p[sizeof(s_ctrl) - 1];
+            p += sizeof(s_ctrl);
+            value = c & 0x1f;
+            if(
+                ! value ||
+                (
+                    (c & 0xe0) != 0x40 &&
+                    ! (c >= 'a' && c <= 'z')
+                )
+            )
+            {
+                printf("ERROR: Expected A through Z or [\\]^_ after <control>.\r\n");
+                return false;
+            }
+        }
+        else
+        {
+            value = *p++;
+        }
+        if(n < maxLength)
+        {
+            output[n] = value;
+        }
+     }
+     output[maxLength < n ? maxLength : n] = 0;
+     if(n > maxLength)
+     {
+         printf(
+             "ERROR: String length %u exceeded maximum of %u characters.\r\n",
+             n, maxLength
+        );
+        return false;
+    }
+    return true;
+}
+
 int telnet_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int telnet_main(int argc UNUSED_PARAM, char **argv)
 {
@@ -606,14 +720,15 @@
 		G.termios_raw = G.termios_def;
 		cfmakeraw(&G.termios_raw);
 	}
-
+	
+	G.asciiEscape = "<control>]";
 #if ENABLE_FEATURE_TELNET_AUTOLOGIN
-	if (1 & getopt32(argv, "al:", &G.autologin))
+	if (1 & getopt32(argv, "al:e:", &G.autologin, &G.asciiEscape))
 		G.autologin = getenv("USER");
-	argv += optind;
 #else
-	argv++;
+	getopt32(argv, "e:", &G.asciiEscape);
 #endif
+        argv += optind;
 	if (!*argv)
 		bb_show_usage();
 	host = *argv++;
@@ -621,6 +736,12 @@
 	if (*argv) /* extra params?? */
 		bb_show_usage();
 
+	convertTextToControl(G.asciiEscape, G.clearEscape, sizeof(G.clearEscape) - 1);
+	G.escapeSequenceLength = strlen(G.clearEscape);
+	G.matchingEscapeCharacters = 0;
+	memset(G.currentCharacters, 0, sizeof(G.currentCharacters));
+	printf("Escape sequence is %s\r\n", G.asciiEscape);
+
 	xmove_fd(create_and_connect_stream_or_die(host, port), netfd);
 
 	setsockopt(netfd, SOL_SOCKET, SO_KEEPALIVE, &const_int_1, sizeof(const_int_1));
